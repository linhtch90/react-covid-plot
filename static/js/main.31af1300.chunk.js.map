{"version":3,"sources":["logo.svg","components/Title/Title.js","components/Plot/Plot.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","Plot","props","plotData","this","data","width","height","margin","top","right","bottom","left","dataKey","value","offset","position","label","angle","stroke","fill","React","PureComponent","Search","state","countryInput","fetchData","handleChange","bind","handleSubmit","event","setState","target","preventDefault","toLowerCase","fetchURL","console","log","fetch","then","response","json","i","length","Date","slice","type","id","placeholder","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,iMCG5B,SAASC,IACpB,OACI,yBAAKC,UAAU,YACb,oE,oEC0CKC,E,kDA3Cb,WAAYC,GAAQ,uCACZA,G,qDAgBN,IAAIC,EAAWC,KAAKF,MAAMG,KAC1B,OACE,yBAAKL,UAAU,iBACb,kBAAC,IAAD,CACEM,MAAO,KACPC,OAAQ,IACRF,KAAMF,EACNK,OAAQ,CACNC,IAAK,EACLC,MAAO,EACPC,OAAQ,GACRC,KAAM,KAGV,kBAAC,IAAD,CAAOC,QAAQ,QACb,kBAAC,IAAD,CAAOC,MAAM,OAAOC,OAAQ,EAAGC,SAAS,YAExC,kBAAC,IAAD,CAAOH,QAAQ,QAAQI,MAAO,CAAEH,MAAO,SAAUI,OAAQ,GAAIF,SAAU,OAAQD,OAAQ,MACvF,kBAAC,IAAD,CAAMF,QAAQ,QAAQM,OAAO,UAAUC,KAAK,YAC5C,kBAAC,IAAD,Y,GArCSC,IAAMC,eCmDVC,E,kDAlDb,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CAAEC,aAAc,KAAMC,UAAW,MAC9C,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJH,E,yDAONE,GACX1B,KAAK2B,SAAS,CAAEN,aAAcK,EAAME,OAAOlB,U,mCAGhCgB,GAAQ,IAAD,OAClBA,EAAMG,iBACN7B,KAAKoB,MAAMC,aAAerB,KAAKoB,MAAMC,aAAaS,cAClD,IAAMC,EAAQ,oDAAgD/B,KAAKoB,MAAMC,aAA3D,0BACdW,QAAQC,IAAIF,GACZG,MAAMH,GACHI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAClC,GACL,IAAK,IAAIqC,EAAI,EAAGA,EAAIrC,EAAKsC,OAAQD,IAC/BrC,EAAKqC,GAAGE,KAAOvC,EAAKqC,GAAGE,KAAKC,MAAM,EAAG,IAEvC,EAAKd,SAAS,CAAEL,UAAWrB,S,+BAK/B,OACE,yBAAKL,UAAU,mBACb,yBAAKA,UAAU,aACb,2BACE8C,KAAK,OACLC,GAAG,gBACHC,YAAY,aACZlC,MAAOV,KAAKoB,MAAMC,aAClBwB,SAAU7C,KAAKuB,eAEjB,2BACEmB,KAAK,SACLC,GAAG,gBACHjC,MAAM,OACNoC,QAAS9C,KAAKyB,gBAGjBzB,KAAKoB,MAAME,UAAY,kBAAC,EAAD,CAAMrB,KAAMD,KAAKoB,MAAME,YAAgB,Q,GA7ClDL,IAAM8B,WCYZC,MATf,WACI,OACH,yBAAKpD,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCeqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.31af1300.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './Title.css';\r\n\r\nexport default function Title() {\r\n    return (\r\n        <div className=\"TitleBar\">\r\n          <h1>COVID-19 CONFIRMED CASES BY COUNTRY</h1>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./Plot.css\";\r\nimport { AreaChart, XAxis, YAxis, Area, Tooltip, Label } from \"recharts\";\r\n\r\nclass Plot extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // handleData() {\r\n  //   let data = this.props.data;\r\n  //   let plotData = data.map((element, index, array) => {\r\n  //     if (index > 0) {\r\n  //       const container = {};\r\n  //       container[\"Date\"] = element.Date.slice(0, 10);\r\n  //       container[\"NewCases\"] = array[index].Cases - array[index - 1].Cases;\r\n  //     }\r\n  //   });\r\n  //   return plotData;\r\n  // }\r\n\r\n  render() {\r\n    let plotData = this.props.data;\r\n    return (\r\n      <div className=\"PlotContainer\">\r\n        <AreaChart\r\n          width={1100}\r\n          height={400}\r\n          data={plotData}\r\n          margin={{\r\n            top: 0,\r\n            right: 0,\r\n            bottom: 20,\r\n            left: 30,\r\n          }}\r\n        >\r\n        <XAxis dataKey=\"Date\">\r\n          <Label value=\"Date\" offset={0} position=\"bottom\"/>\r\n        </XAxis>\r\n          <YAxis dataKey=\"Cases\" label={{ value: 'People', angle: -90, position: 'left', offset: 15}} />\r\n          <Area dataKey=\"Cases\" stroke=\"#f4511e\" fill=\"#ffab91\" />\r\n          <Tooltip />\r\n        </AreaChart>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Plot;\r\n","import React from \"react\";\r\nimport \"./Search.css\";\r\nimport Plot from \"../Plot/Plot.js\";\r\n\r\nclass Search extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { countryInput: null, fetchData: null };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({ countryInput: event.target.value });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.state.countryInput = this.state.countryInput.toLowerCase();\r\n    const fetchURL = `https://api.covid19api.com/dayone/country/${this.state.countryInput}/status/confirmed/live`;\r\n    console.log(fetchURL);\r\n    fetch(fetchURL)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        for (let i = 0; i < data.length; i++) {\r\n          data[i].Date = data[i].Date.slice(0, 10);\r\n        }\r\n        this.setState({ fetchData: data });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"SearchContainer\">\r\n        <div className=\"SearchBar\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"country-input\"\r\n            placeholder=\"Country...\"\r\n            value={this.state.countryInput}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            type=\"button\"\r\n            id=\"submit-button\"\r\n            value=\"SHOW\"\r\n            onClick={this.handleSubmit}\r\n          />\r\n        </div>\r\n        {this.state.fetchData ? <Plot data={this.state.fetchData} /> : \"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Title from './components/Title/Title.js';\r\nimport Search from './components/Search/Search.js';\r\nimport Plot from './components/Plot/Plot.js';\r\n\r\nfunction App() {\r\n    return (\r\n\t<div className=\"AppContainer\">\r\n\t    <Title />\r\n\t    <Search />\t   \r\n\t</div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}